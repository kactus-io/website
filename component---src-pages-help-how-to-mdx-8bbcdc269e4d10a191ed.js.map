{"version":3,"sources":["webpack:///./src/pages/help/how-to.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXLayout","Layout","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"mappings":"uPAQaA,G,UAAe,IACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,2CACA,wEAAuD,kBAAIC,WAAW,KAAf,UAAvD,qBAA+G,kBAAIA,WAAW,KAAf,YAA/G,+IAAmS,0BAAYA,WAAW,KAAvB,OAAnS,kBACA,kCACA,yFAAwE,0BAAYA,WAAW,KAAvB,OAAxE,KACA,sBACE,kBAAIA,WAAW,MAAf,2BACA,kBAAIA,WAAW,MAAf,+BACA,kBAAIA,WAAW,MAAf,uBACA,kBAAIA,WAAW,MAAf,sBAEF,2EAA0D,6BAAGA,WAAW,KAAQ,CAC5E,KAAQ,iFAD8C,YAA1D,iCAGA,sBACE,kBAAIA,WAAW,MAAf,oDACA,kBAAIA,WAAW,MAAf,mCAAwD,0BAAYA,WAAW,MAAvB,yBAAxD,KACA,kBAAIA,WAAW,MAAf,+BACA,kBAAIA,WAAW,MAAf,uBACA,kBAAIA,WAAW,MAAf,UACE,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAf,mEACA,kBAAIA,WAAW,MAAf,+DAIN,4CACA,8NACA,qBAAG,+BAAKA,WAAW,KAAQ,CACvB,IAAO,sGACP,IAAO,aAEX,uBACA,uDACA,sBACE,kBAAIA,WAAW,MAAf,yCAA8D,kBAAIA,WAAW,MAAf,SAC9D,kBAAIA,WAAW,MAAf,6DACA,kBAAIA,WAAW,MAAf,4CAAiE,kBAAIA,WAAW,MAAf,UAEnE,qBAAG,+BAAKA,WAAW,KAAQ,CACvB,IAAO,sGACP,IAAO,YAEX,uBACA,0EACA,qBAAG,+BAAKA,WAAW,KAAQ,CACvB,IAAO,sGACP,IAAO,qBAEX,uBACA,wCACA,yJACA,sBACE,kBAAIA,WAAW,MAAf,qFACA,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,8EAAmG,0BAAYA,WAAW,MAAvB,6BACnG,kBAAIA,WAAW,MAAf,eAAoC,6BAAGA,WAAW,MAAS,CACvD,KAAQ,2BADwB,UAApC,2BAE+C,0BAAYA,WAAW,MAAvB,YAF/C,mBAEwH,0BAAYA,WAAW,MAAvB,cAFxH,0CAIF,8BACE,iBAAGA,WAAW,cAAa,kBAAIA,WAAW,KAAf,SAA3B,oFAAiJ,6BAAGA,WAAW,KAAQ,CACnK,KAAQ,2BADqI,UAAjJ,oBASNJ,EAAWK,gBAAiB,G,kCCxFb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EAZT","file":"component---src-pages-help-how-to-mdx-8bbcdc269e4d10a191ed.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Layout from '../../components/mdx-page';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`How does it work?`}</h1>\n    <p>{`That's a good question. Instead of tracking the `}<em parentName=\"p\">{`actual`}</em>{` sketch files (or `}<em parentName=\"p\">{`binaries`}</em>{`) in git, Kactus transforms your sketch file into groups of individual text files – one for each layer/page – that are much more suited for `}<inlineCode parentName=\"p\">{`git`}</inlineCode>{` to work with.`}</p>\n    <h2>{`Workflow`}</h2>\n    <p>{`The basic workflow looks very similar to how many developers use `}<inlineCode parentName=\"p\">{`git`}</inlineCode>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Clone your repo locally`}</li>\n      <li parentName=\"ol\">{`Make your changes in Sketch`}</li>\n      <li parentName=\"ol\">{`Commit your changes`}</li>\n      <li parentName=\"ol\">{`Push your changes`}</li>\n    </ol>\n    <p>{`However, when working with multiple designers, the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow\"\n      }}>{`git-flow`}</a>{` methodology works very well:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Clone your repo (if you're just getting started)`}</li>\n      <li parentName=\"ol\">{`Checkout a feature branch (e.g. `}<inlineCode parentName=\"li\">{`feat/background-color`}</inlineCode>{`)`}</li>\n      <li parentName=\"ol\">{`Make your changes in Sketch`}</li>\n      <li parentName=\"ol\">{`Commit your changes`}</li>\n      <li parentName=\"ol\">{`Either:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Push your changes to your git server for others to review/merge`}</li>\n          <li parentName=\"ul\">{`Merge your changes into another branch (master) yourself`}</li>\n        </ul>\n      </li>\n    </ol>\n    <h2>{`Committing Changes`}</h2>\n    <p>{`When Kactus is running (with your repository open), it watches your sketch files and re-parses them when a change is detected. This parsed (or exploded) view of your sketch file is what git tracks.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://user-images.githubusercontent.com/3254314/28254880-df5a388e-6a65-11e7-8b73-8de6fe227927.gif\",\n        \"alt\": \"commit\"\n      }}></img></p>\n    <hr></hr>\n    <h2>{`Merging two parallel branches`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Checkout the branch you want to merge `}<em parentName=\"li\">{`into`}</em></li>\n      <li parentName=\"ol\">{`Select \"Merge into Current Branch\" from the \"Branch\" menu`}</li>\n      <li parentName=\"ol\">{`Select the branch that you want to merge `}<em parentName=\"li\">{`from`}</em></li>\n    </ol>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://user-images.githubusercontent.com/3254314/28254882-e28fb8d0-6a65-11e7-86a5-d766d4303959.gif\",\n        \"alt\": \"merge\"\n      }}></img></p>\n    <hr></hr>\n    <h2>{`Sharing text styles across multiple sketch files`}</h2>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://user-images.githubusercontent.com/3254314/28254883-e5f79a92-6a65-11e7-86cc-3cfdc687a454.gif\",\n        \"alt\": \"sharetextstyle\"\n      }}></img></p>\n    <hr></hr>\n    <h2>{`Existing Repos`}</h2>\n    <p>{`If your sketch files are already tracked in a git repository, there are few things you need to do to get the most out of Kactus.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Open your repo in Kactus to generate the JSON representation of your sketch files`}</li>\n      <li parentName=\"ol\">{`Commit the generated JSON directories`}</li>\n      <li parentName=\"ol\">{`Untrack sketch files. In most cases, this can be done with git by running: `}<inlineCode parentName=\"li\">{`git rm --cached *.sketch`}</inlineCode></li>\n      <li parentName=\"ol\">{`Tell git to `}<a parentName=\"li\" {...{\n          \"href\": \"/help/glossary/#ignore\"\n        }}>{`ignore`}</a>{` sketch files by adding `}<inlineCode parentName=\"li\">{`*.sketch`}</inlineCode>{` to your repo's `}<inlineCode parentName=\"li\">{`.gitignore`}</inlineCode>{` file (create it if it doesn't exist)`}</li>\n    </ol>\n    <blockquote>\n      <p parentName=\"blockquote\"><em parentName=\"p\">{`Note:`}</em>{` When you create a new repository with Kactus, it is automatically configured to `}<a parentName=\"p\" {...{\n          \"href\": \"/help/glossary/#ignore\"\n        }}>{`ignore`}</a>{` sketch files.`}</p>\n    </blockquote>\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}